# Generated by Django 4.1.1 on 2022-10-10 19:23

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cards',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cardTitle', models.CharField(max_length=50, verbose_name='Card title')),
                ('cardMeaning', models.CharField(max_length=50, verbose_name='Card meaning')),
                ('cardImage', models.ImageField(upload_to='cards', verbose_name='Card image')),
                ('imageURL', models.URLField(default='http://127.0.0.1:8000/cards/', verbose_name='Image source')),
            ],
        ),
        migrations.CreateModel(
            name='CategoriaPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Category Post')),
            ],
        ),
        migrations.CreateModel(
            name='ShortsV2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('likes', models.IntegerField(default=0, verbose_name='Likes')),
                ('short_name', models.CharField(max_length=50, verbose_name='Short name')),
                ('video', models.FileField(upload_to='shorts', verbose_name='VideoFile')),
                ('short_url', models.URLField(default='http://127.0.0.1:8000/', verbose_name='Short URL')),
                ('translation', models.TextField(blank=True, verbose_name='Translation')),
                ('question', models.CharField(max_length=100, verbose_name='Question')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.FileField(upload_to='PostImage', verbose_name='Post image')),
                ('title', models.CharField(max_length=500, verbose_name='Post title')),
                ('intro', models.CharField(max_length=500, verbose_name='Post intro')),
                ('content', models.TextField(blank=True, verbose_name='Post content')),
                ('image_src', models.URLField(default='http://127.0.0.1:8000/', verbose_name='post image source ')),
                ('categoria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.categoriapost')),
            ],
        ),
        migrations.CreateModel(
            name='AnswersForShortsV2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.CharField(default='', max_length=100, verbose_name='Answer text')),
                ('is_correct', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False)),
                ('parent_question', models.ForeignKey(default=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='answers', to='api.shortsv2')),
            ],
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('premium', models.BooleanField(default=False, verbose_name='premium')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
